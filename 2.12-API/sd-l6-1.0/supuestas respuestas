// Task 3: addUser(first_name, last_name, email)

import subprocess

# Boilerplate function - include this in every test below!
def prepare_and_assert(input_array, output_array):
    # Prepare Variables
    expected_output = '\n'.join(output_array)

    # Get Actual Output 
    output_data = subprocess.run(['node', 'index.js'] + input_array, stdout=subprocess.PIPE)
    output_bytes = output_data.stdout.strip()
    output_string = output_bytes.decode("utf-8")

    # Test if Expected Output is found in Actual Output
    assert expected_output in output_string

# Test 1
def test_task_one():
    # Inputs
    input_array = [
        '1'
    ]

    # Outputs
    output_array = [
        "{ body: 'success' }"
    ]

    prepare_and_assert(input_array, output_array)

# Test 2
def test_task_two():
    # Inputs
    input_array = [
        '2'
    ]

    # Outputs
    output_array = [
        "[",
        "  {",
        "    id: 1,",
        "    first_name: 'Joshua',",
        "    last_name: 'Diaz',",
        "    email: 'j3@example.com'",
        "  },",
        "  {",
        "    id: 2,",
        "    first_name: 'Song',",
        "    last_name: 'Gonzalez',",
        "    email: 'sgo@example.com'",
        "  },",
        "  {",
        "    id: 3,",
        "    first_name: 'Milagro',",
        "    last_name: 'Juarez',",
        "    email: 'miljua23@example.com'",
        "  },",
        "  {",
        "    id: 4,",
        "    first_name: 'Olivia',",
        "    last_name: 'Brown',",
        "    email: 'olibrown432@example.net'",
        "  }",
        "]"
    ]    

    prepare_and_assert(input_array, output_array)

# Test 3
def test_task_three():
    # Inputs
    input_array = [
        '3'
    ]

    # Outputs
    output_array = [
        "{",
        "  id: 6,",
        "  first_name: 'Kai',",
        "  last_name: 'Nathaniel',",
        "  email: 'kai.n@example.org'",
        "}"
    ]

    prepare_and_assert(input_array, output_array)

# Test 4
def test_task_four():
    # Inputs
    input_array = [
        '4'
    ]

    # Outputs
    output_array = [
        "[",
        "  {",
        "    id: 1,",
        "    first_name: 'Joshua',",
        "    last_name: 'Diaz',",
        "    email: 'j3@example.com'",
        "  },",
        "  {",
        "    id: 2,",
        "    first_name: 'Song',",
        "    last_name: 'Gonzalez',",
        "    email: 'sgo@example.com'",
        "  },",
        "  {",
        "    id: 3,",
        "    first_name: 'Milagro',",
        "    last_name: 'Juarez',",
        "    email: 'miljua23@example.com'",
        "  },",
        "  {",
        "    id: 4,",
        "    first_name: 'Olivia',",
        "    last_name: 'Brown',",
        "    email: 'olibrown432@example.net'",
        "  }",
        "]"
    ]

    prepare_and_assert(input_array, output_array)

    /////////////////////

    // Task 1: getServerURL()

export function getServerURL() {
    return "http://localhost:3000/"; 
}

// Task 1: getServerURL()
// Crear el método getServerURL
export function getServerURL() {
    return 'http://127.0.0.1:5500/public/';
}

///////////////

// Task 2: listUsers()

import { getServerURL } from "./task1.js";

export async function listUsers() {
   const response = await fetch(getServerURL()) + "Users"
    const users = await response.json();
    console.log(users);
}


// Método para imprimir la lista de usuarios desde db.json
export function listUsers() {
    // Realizamos una solicitud GET al servidor para obtener la lista de usuarios desde db.json
    fetch("http://127.0.0.1:5500/db.json")  // Usamos la URL correcta para obtener db.json
      .then(response => response.json())  // Convertimos la respuesta a formato JSON
      .then(data => {
          console.log(data.users.slice(0, 4));  // Imprimimos la lista de usuarios en la consola (data.users)
      })
      .catch(error => {
        console.error("Error al obtener la lista de usuarios:", error);  // Manejo de errores
      });
  }

  ////////

  // Método para eliminar un usuario por ID
export async function delUser(id) {
    try {
      // Realiza una solicitud DELETE a la API del servidor
      const response = await fetch(http://127.0.0.1:5500/db.json${id}, {
        method: "DELETE",
      });
  
      // Verifica si la respuesta es exitosa
      if (response.ok) {
        console.log(Usuario con ID ${id} eliminado con éxito.);
      } else {
        console.error(Error al eliminar el usuario con ID ${id}.);
      }
    } catch (error) {
      console.error("Error al intentar eliminar el usuario:", error);
    }
  }
  
  console.log(delUser())